// components/meal-plan/MealsGrid.tsx
"use client";
import React, { useState, useEffect, useCallback, useMemo } from "react";
import { PlusIcon } from "@heroicons/react/24/outline"; //
import { DayOfTheWeek, UrlAction } from "@/constants/constants-enums";
import { IMealInterface } from "@/models/interfaces/meal/Meal";
import { crudReducer } from "@/util/state-management";
import ToggleInput from "../ui/inputs/toggle-input";
import { FormActionType } from "@/models/interfaces/types";
import ConfirmActionModal, {
  ConfirmActionModalProps,
} from "../ui/modals/confirm-action-modal";
import { deleteImageFromS3, saveImageToS3 } from "@/lib/s3-client";
import MealModalContent from "./meals-modal-content";
import { deleteMeal, saveMeal, updateMeal } from "@/actions/meals-action";
import usePagination from "@/hooks/use-pagination";
import CenteredPageNumbers from "../ui/pagination/centered-page-numbers";
import { usePathname } from "next/navigation";
import WeeklyMealsGrid from "./weekly-meals-grid";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDayjs } from "@mui/x-date-pickers/AdapterDayjs";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import dayjs from "dayjs";
import "dayjs/locale/en-nz";
import { startOfWeek, endOfWeek } from "date-fns";
import { groupMealsByWeek } from "@/util/meal-utils";
import { IClientInterface } from "@/models/interfaces/client/client";
import { hostname } from "@/constants/constant-strings";

type MealsGridProps = {
  mealsData: IMealInterface[] | undefined; // Meals data fetched from API
  client: IClientInterface;
};
// 80 callout fee, 15 mins 32mins
const MealsGrid: React.FC<MealsGridProps> = ({ mealsData, client }) => {
  const pathname = usePathname();
  const [modalOpen, setModalOpen] = useState(false);
  const [showConsumedOnly, setShowConsumedOnly] = useState<boolean>(false);
  const [showAutoGeneratedOnly, setShowAutoGeneratedOnly] =
    useState<boolean>(false);

  const [selectedMeal, setSelectedMeal] = useState<IMealInterface>();
  const [confirmModalProps, setConfirmModalProps] =
    useState<ConfirmActionModalProps>({
      open: false,
      title: "",
      message: "",
      confirmText: "",
      colorScheme: "",
      onConfirm: () => {},
    });
  const [action, setAction] = useState<FormActionType | "Search">("Add");

  const [startDate, setStartDate] = useState<Date | null>(
    startOfWeek(new Date(), { weekStartsOn: 0 })
  );
  const [endDate, setEndDate] = useState<Date | null>(
    endOfWeek(new Date(), { weekStartsOn: 0 })
  );
  const [searchQuery, setSearchQuery] = useState<string>("");

  // Initialize pagination
  const { currentPage, changePage } = usePagination({ defaultPage: 1 });
  const [weeks, setWeeks] = useState<IMealInterface[][]>([]);
  const totalPages = weeks.length;

  const [filteredMeals, setFilteredMeals] = useState<IMealInterface[]>(
    mealsData || []
  );

  // Reset currentPage when filters change
  useEffect(() => {
    changePage(1);
  }, [
    startDate,
    endDate,
    searchQuery,
    showConsumedOnly,
    showAutoGeneratedOnly,
    changePage,
  ]);

  const handleImageError = (
    event: React.SyntheticEvent<HTMLImageElement, Event>
  ) => {
    event.currentTarget.src = "/aiimages/food/default-food.svg";
  };

  const defaultMeal: IMealInterface = {
    id: 0,
    mealPlanId: 1,
    clientId: client.Id!,
    name: "",
    ingredientLines: [],
    ingredients: [], // Populate as needed
    nutrients: {},
    timeConsumed: undefined,
    //mealNumber: "",
    mealTypeKey: [],
    mealType: [],
    isLogged: false,
    image: "",
    dayOfTheWeek: DayOfTheWeek.Sunday,
    weight: 0,
    timeScheduled: new Date(),
  };

  // Filtering Logic
  useEffect(() => {
    if (!mealsData) {
      setFilteredMeals([]);
      return;
    }

    let filtered = [...mealsData];

    // Filter by date range
    if (startDate && endDate) {
      filtered = filtered.filter((meal) => {
        const mealDate = new Date(meal.timeScheduled);
        return mealDate >= startDate && mealDate <= endDate;
      });
    }

    // Filter by search query
    if (searchQuery.trim() !== "") {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter((meal) =>
        meal.name.toLowerCase().includes(query)
      );
    }

    // Filter by consumed status
    if (showConsumedOnly) {
      filtered = filtered.filter((meal) => meal.isLogged);
    }

    // Filter by consumed status
    if (showAutoGeneratedOnly) {
      filtered = filtered.filter((meal) => meal.mealPlanId);
    }

    setFilteredMeals(filtered);
  }, [
    startDate,
    endDate,
    searchQuery,
    showConsumedOnly,
    showAutoGeneratedOnly,
    mealsData,
  ]);

  // Update Weeks Based on Filtered Meals
  useEffect(() => {
    const groupedWeeks = groupMealsByWeek(
      filteredMeals,
      startDate as Date,
      endDate as Date
    );
    setWeeks(groupedWeeks);
  }, [filteredMeals, startDate, endDate]);

  // Auto-log meals if a day has passed -
  // TODO: Update auto-logging to be configurable using a setting - probably run a cron job
  // TODO: ask for an effective way to display day of the week the meal is scheduled
  // auto update search params based on current page
  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const actionParam = params.get("action");
    const idParam = params.get("id");

    if (actionParam === UrlAction.View && idParam) {
      const meal = mealsData?.find((r) => String(r.id) === idParam);
      if (meal) {
        setSelectedMeal(meal);
        setAction("View");
        setModalOpen(true);
      }
    } else if (actionParam === UrlAction.Edit && idParam) {
      const meal = mealsData?.find((r) => String(r.id) === idParam);
      if (meal) {
        setSelectedMeal(meal);
        setAction("Edit");
        setModalOpen(true);
      }
    } else if (actionParam === UrlAction.Add) {
      setSelectedMeal(defaultMeal);
      setAction("Add");
      setModalOpen(true);
    } else {
      setModalOpen(false);
      setSelectedMeal(undefined);
    }
  }, [filteredMeals]);

  // Get current week's meals
  const currentWeekMeals = useMemo(() => {
    return weeks[currentPage - 1] || [];
  }, [currentPage, weeks]);

  const handleCloseModal = useCallback(() => {
    setModalOpen(false);
    setSelectedMeal(undefined);
    setAction("View");

    // Remove 'action' and 'id' from URL while preserving 'page'
    const params = new URLSearchParams(window.location.search);
    params.delete("action");
    params.delete("id");
    params.delete("mealType");
    params.delete("timeScheduled");
    params.delete("mealPlanId");
    params.set("page", String(currentPage)); // Ensure 'page' remains

    const newUrl = params.toString()
      ? `${pathname}?${params.toString()}`
      : pathname;
    window.history.replaceState(null, "", newUrl);
  }, [pathname, currentPage]);

  const toggleConsumed = () => {
    setShowConsumedOnly(!showConsumedOnly);
  };

  const toggleAutoGeneratedOnly = () => {
    setShowAutoGeneratedOnly(!showAutoGeneratedOnly);
  };

  const upsertMealState = useCallback((meal: IMealInterface) => {
    setFilteredMeals((prevMeals) =>
      crudReducer(prevMeals, { type: "upsert", item: meal })
    );
  }, []);

  const deleteMealState = useCallback((meal: IMealInterface) => {
    setFilteredMeals((prevMeals) =>
      crudReducer(prevMeals, { type: "delete", item: meal })
    );
  }, []);

  /**
   * Handler for adding a new meal via the drawer form.
   * Converts form data to a IMealInterface object and saves it.
   */
  const handleAddMeal = useCallback(
    async (meal: IMealInterface) => {
      try {
        // Save the new meal to the backend
        if (!meal) {
          throw new Error("Meal data is missing");
        } else if (!meal.clientId) {
          throw new Error("Client ID is missing");
        } else if (!meal.ingredients || meal.ingredients.length === 0) {
          setConfirmModalProps((prev) => ({
            ...prev,
            open: true,
            title: "Warning",
            message: "Please add ingredients to the meal.",
            confirmText: "OK",
            onConfirm: () => {
              console.log("confirmModalProps", confirmModalProps);
              closeConfirmModal();
            },
            onClose: () => {},
            colorScheme: "bg-yellow-600 hover:bg-yellow-500",
          }));
          return;
        }

        // Extract file information
        let objectUrl = meal.image;
        if (
          meal.image &&
          meal.image.startsWith("data:image") &&
          !meal.image.includes("edamam")
        ) {
          objectUrl =
            (await saveImageToS3(
              meal.image,
              `client/${client.UserID}/meals/`
            )) || meal.image;
          if (!objectUrl) {
            throw new Error("Failed to upload the image to S3");
          }
        }
        // Update the meal image URL to the S3 URL
        const updatedMeal = {
          ...meal,
          image: objectUrl,
          foodSourceUrl:
            meal.foodSourceUrl ||
            `${hostname}/${pathname}?page=${currentPage}&action=${UrlAction.View}&id=`,
        };
        const newMeal = await saveMeal(updatedMeal);
        if (newMeal && newMeal.id) {
          upsertMealState(newMeal);
          //    upsertOptimisticMeals({ type: "upsert", item: newMeal });
        }
      } catch (error) {
        console.error("Error saving meal: ", error);
      }

      // Close the Add Meal Drawer after saving
      handleCloseModal();
    },
    [handleCloseModal]
  );

  /**
   * Handler for viewing meal details.
   * It sets the selected meal and opens the Meal Details Drawer.
   */
  const handleViewDetails = useCallback(
    (meal: IMealInterface) => {
      setSelectedMeal(meal);
      setAction("View");
      setModalOpen(true);

      const params = new URLSearchParams(window.location.search);
      params.set("page", String(currentPage));
      params.set("action", UrlAction.View);
      params.set("id", String(meal.id));
      window.history.pushState(null, "", `${pathname}?${params.toString()}`);
    },
    [pathname, currentPage]
  );

  /**
   * Handler for updating a meal.
   * Updates the meal in the backend and notifies the parent component.
   */
  const handleUpdateMeal = useCallback(
    async (meal: IMealInterface) => {
      try {
        // Save the new meal to the backend
        if (!meal) {
          throw new Error("Meal data is missing");
        } else if (!meal.clientId) {
          throw new Error("Client ID is missing");
        } else if (!meal.ingredients || meal.ingredients.length === 0) {
          setConfirmModalProps((prev) => ({
            ...prev,
            open: true,
            title: "Warning",
            message: "Please add ingredients to the meal.",
            confirmText: "OK",
            onConfirm: () => {
              console.log("confirmModalProps", confirmModalProps);
              closeConfirmModal();
            },
            onClose: () => {},
            colorScheme: "bg-yellow-600 hover:bg-yellow-500",
          }));
          return;
        }

        // replace image if it's a new image
        if (
          meal.image &&
          meal.image.startsWith("data:image") &&
          !meal.image.includes("edamam")
        ) {
          const oldImageUrl = mealsData?.find((r) => r.id === meal.id)?.image;

          const newImageUrl = await saveImageToS3(meal.image, "meals/");
          if (newImageUrl) {
            meal.image = newImageUrl;
          } else {
            console.error("Failed to upload the new image to S3.");
            // Handle the error as needed, possibly abort the update
          }

          // Only delete the old image if the new image was uploaded successfully and the old image exists
          if (newImageUrl && oldImageUrl) {
            // Assuming you pass the oldImageUrl
            const deletionSuccess = await deleteImageFromS3(oldImageUrl);
            if (!deletionSuccess) {
              console.error("Failed to delete the old image from S3.");
              // Handle the error as needed, possibly abort the update
            }
          }
        }

        const savedMeal = await updateMeal(meal);
        if (savedMeal) {
          upsertMealState(savedMeal);
          //  upsertOptimisticMeals({ type: "upsert", item: savedMeal });
        }
      } catch (error) {
        console.error("Error saving meal: ", error);
      }

      // Close the Add Meal Drawer after saving
      handleCloseModal();
    },
    [handleCloseModal, mealsData]
  );

  /**
   * Handler for deleting a meal.
   * Removes the meal from the backend and notifies the parent component.
   */
  const handleDeleteMeal = useCallback(
    async (meal: IMealInterface) => {
      try {
        if (meal.image && !meal.image.includes("edamam")) {
          const deletionSuccess = await deleteImageFromS3(meal.image);
          if (!deletionSuccess) {
            console.error("Failed to delete the image from S3.");
          }
        }

        const result = await deleteMeal(meal);
        // Optimistically update the UI by removing the deleted meal
        //upsertOptimisticMeals({ type: "delete", item: meal });
        if (result && result.success) {
          deleteMealState(meal);
          console.log(`Meal with ID ${meal.id} deleted successfully.`);
        }
      } catch (error) {
        console.error("Error deleting meal:", error);
        // Optionally, show an error message to the user
      }
      handleCloseModal();
    },
    [handleCloseModal]
  );

  const closeConfirmModal = useCallback(() => {
    setConfirmModalProps({
      open: false,
      title: "",
      message: "",
      confirmText: "",
      cancelText: "",
      colorScheme: "",
      onConfirm: () => {},
      onClose: () => {},
    });
  }, []);

  const confirmDelete = useCallback(async () => {
    if (selectedMeal) {
      await handleDeleteMeal(selectedMeal);
      closeConfirmModal();
    }
  }, [selectedMeal, handleDeleteMeal, closeConfirmModal]);

  const handleClickDelete = useCallback(() => {
    if (action === "View" || action === "Edit") {
      setConfirmModalProps((prev) => ({
        ...prev,
        open: true,
        title: "Delete Meal",
        message: `Are you sure you want to delete the meal "${selectedMeal?.name}"? This action cannot be undone.`,
        confirmText: "Delete",
        cancelText: "Cancel",
        onConfirm: confirmDelete,
        colorScheme: "bg-red-600 hover:bg-red-500",
      }));
    }
  }, [action, selectedMeal, confirmDelete]);

  const handleClickAdd = useCallback(() => {
    setAction("Add");
    setSelectedMeal(defaultMeal);
    setModalOpen(true);

    // Update URL with only 'action=Add'
    const params = new URLSearchParams(window.location.search);
    params.set("page", String(currentPage));
    params.set("action", UrlAction.Add);
    params.delete("id"); // Ensure 'id' is removed
    window.history.pushState(null, "", `${pathname}?${params.toString()}`);
  }, [pathname, currentPage]);

  return (
    <div className="flex flex-col min-h-full ">
      {/* Controls Container */}
      <div className="flex flex-col justify-between sm:flex-row items-center p-6 mt-4 space-y-4  sm:space-y-0 max-w-[1600px]">
        <LocalizationProvider dateAdapter={AdapterDayjs}>
          {/* Search Input */}
          <input
            type="text"
            placeholder="Search meals..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="px-4 py-2 mr-4 border rounded-md w-full sm:w-1/3 text-gray-700"
          />

          {/* Toggle Consumed Meals */}
          <ToggleInput
            label="Show Consumed Meals Only"
            enabled={showConsumedOnly}
            onChange={toggleConsumed}
          />

          {/* Toggle AutoGenerated Meals */}
          <ToggleInput
            label="Show Auto Generated Meals Only"
            enabled={showAutoGeneratedOnly}
            onChange={toggleAutoGeneratedOnly}
          />

          {/* Date Range Pickers and filters */}
          <div className="flex flex-col sm:flex-row items-center space-y-4 sm:space-y-0 sm:space-x-4 w-full lg:w-auto">
            <DatePicker
              label="Start Date"
              value={startDate ? dayjs(startDate) : null}
              onChange={(newValue) => {
                setStartDate(newValue ? newValue.toDate() : null);
                changePage(1);
              }}
            />
            <DatePicker
              label="End Date"
              value={endDate ? dayjs(endDate) : null}
              minDate={startDate ? dayjs(startDate) : undefined}
              onChange={(newValue) => {
                setEndDate(newValue ? newValue.toDate() : null);
                changePage(1);
              }}
            />
          </div>
        </LocalizationProvider>
      </div>

      {/* Meals Grid */}
      <WeeklyMealsGrid
        sections={client?.ClientSettingsDto?.mealPlanPreferences?.plan.sections}
        // TODO: Fix bug when spanning more than 2 weeks - check if UTC issue
        startDate={currentWeekMeals[0]?.timeScheduled || startDate}
        weekMeals={currentWeekMeals || []}
        handleViewDetails={handleViewDetails}
        handleImageError={handleImageError}
        filteredMeals={filteredMeals}
      />

      {/* Pagination */}
      <div className="py-4 max-w-[1600px]">
        <CenteredPageNumbers
          currentPage={currentPage}
          totalPages={totalPages}
          onPageChange={changePage}
        />
      </div>

      <p>confirmModalProps</p>
      {/* Add or View Meal Modal, closes when there is a confirmopen dialog */}
      {selectedMeal && !confirmModalProps.open && (
        <MealModalContent
          page={currentPage}
          action={action}
          setAction={setAction}
          open={modalOpen}
          setOpen={setModalOpen}
          mealAction={action === "Add" ? handleAddMeal : handleUpdateMeal}
          meal={selectedMeal}
          setMeal={setSelectedMeal}
          deleteButtonText={
            action === "View" || action === "Edit" ? "Delete" : undefined
          }
          onDelete={handleClickDelete}
          onClose={handleCloseModal}
        />
      )}

      {/* Add Meal Button */}
      <button
        onClick={handleClickAdd}
        className="fixed bottom-10 right-6 bg-indigo-600 text-white p-4 rounded-full shadow-lg hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500"
        aria-label="Add new meal"
      >
        <PlusIcon className="h-6 w-6" />
      </button>

      {/* Confirmation Modal */}
      {confirmModalProps.open && (
        <ConfirmActionModal
          open={confirmModalProps.open}
          onClose={closeConfirmModal}
          title={confirmModalProps.title}
          message={confirmModalProps.message}
          confirmText={confirmModalProps.confirmText}
          cancelText={confirmModalProps.cancelText}
          onConfirm={confirmModalProps.onConfirm}
          colorScheme={confirmModalProps.colorScheme}
        />
      )}
    </div>
  );
};

export default MealsGrid;
